如果你是一个项目的前端技术负责人，
你的主要职责是什么？？
保证项目按时、按质量的交付上线，以及上线之后的安全稳定运行

指责
把控需求
技术方案设计
开发
监督代码质量
跟踪进度
稳定安全的运行

如何管理好你团队的前端代码
https://blog.51cto.com/u_9177933/3176716


项目负责人需要什么， https://juejin.cn/post/6971116221521461262
1.技术能力-----   基础技术以及项目经验---可以指导同事解决问题
2.规划能力-----   技术体系规划---人力资源规划----任务划分规划------风险规划------突发情况应对能力
3.业务能力----- 整体业务目标是什么---梳理业务流程-----参与需求评审---考虑业务和技术的实现方案
4.协作能力-------与团队的协作以及项目烟对的协作
5.沟通能力-------表达方式---
6.判断能力-------技术判断，风险判断，决策判断
7.框架能力与架构能力-------


作为一个前端小领导 ------------==========
1.要做好人员管理 人员管理  
新人培训 （导师制规范文档沉淀） 人员成长（技术成长靠个人管理上的成长靠组织） 绩效考核/激励（创造价值，开发需求记录在案数据说明一切）
团队氛围（一个月团建一次多分享）公平公正公开（任务需求和开发要有记录，数据说明一切）
2.定制研发流程
3.保证代码代码质量
4.提升开发效率（开发工具，通用组件封装，通用技术类型抽象，多分享）
5.制定技术规范（代码规范，数据库设计规范，其他命名规范）
// 6.文档沉淀（技术文档沉淀）
// 7.工作汇报
8.技术氛围&技术成长（不要影响开发进度，技术调研，技术分享，鼓励分享，兴趣小组）
9.绩效考核 上下游定制统一的ork以及kpi，朝着一个目标前进
目标
达成
对比
成长


研发流程
需求预审
   技术负责人和产品评审，拒绝不合理的需求
需求评审
   技术和产品评审，讨论合理方案
分配任务
   技术负责人分配
技术方案
   开发多写技术方案，有记录
技术方案评审
   开发评审技术方案，有助于大家互相学习提升，保证项目质量
开发排期
   开发自己安排工作
开发
   开发写代码 自测、联调 
   开发自测，减少测试工作量，保证代码质量
   code review
   必须执行，保证代码质量，互相学习成长
体验
   产品发现问题
测试
   性能测试和功能测试
发布
   最好自动化一点
   bug修复
线上bug记录，修复，目的是为了减少bug


//
技术选型选什么
前端框架（vue， react， angular node.js等）
语言（js，ts）
其他（构建工具，CI/CD 等）

技术没有好坏之分，看是否适合自己

技术选型的依据
社区是否已经足够成熟
公司是否已经有经验积累
团队成员的学习成本

要全面考虑各种成本
学习成本
管理成本（如用ts遍地any怎么办）
运维成本
升级成本

要站在团队的角度，而非个人的角度


code review ================================================
1.代码规范（eslint不能全检查，如变量命名，代码语义）
2.重复代码需要抽离，复用
3.单个函数内容过长，需要拆分
4.算法复杂度是否可用？是否可继续优化
5.是否有安全漏洞
6.扩展性如何？（不用为了扩展而扩展，不封闭即可）
7.是否和现有功能重复了
8.是否有完善的单元测试
9.组件设计是否合理

code review的时机
1.提交PR或者MR时，通过代码diff进行code review
2.每周例行一次集体code review

持续优化
1.每次code review的问题要记录下来
2.归纳整理，形成自己的代码规范体系
3.新加入的成员要提前学习，提前规避


如何学习一门新语言，需要考虑哪些方面
1.它的优势和应用场景
2.语法（常量，变量）
3.内置模块和api
4.常用的第三方框架和库
5.开发环境和调试环境
6.线上环境和发布过程

你觉得自己还有哪些不足之处？

怎么详细介绍一个前端项目？
https://www.zhihu.com/question/293521236/answer/2378054875

前端项目负责人在项目初期需要做什么？ ******************************
https://juejin.cn/post/6968874442554343455

前端项目负责人最基础的需要会哪些
https://juejin.cn/post/6971116221521461262

前端项目负责人需要具有的能力
https://juejin.cn/post/6946210273061502990
1.技术能力
2.规划能力
3.业务能力
4.协作能力
5.沟通能力
6.判断能力
7.框架能力
8.架构能力
9.心理能力

07.二面 1：如何回答常见的软技能问题
https://juejin.cn/post/6844904100451057672
08.二面 2：如何介绍项目及应对项目细节追问
https://juejin.cn/post/6844904100459446279


你还有什么想要问我的么
我一般会问技术团队的规模

技术团队有几个人，
几个前端，
几个后端，
高级，中级，初级的分别是多少人

然后就是技术栈

目前在使用什么技术栈
将来打算使用什么技术栈
自己是否可以决定未来技术栈的走向

然后是自己在团队中的角色

负责什么工作
对于项目的决策度

链接：https://juejin.cn/post/7064740689178787871


团队管理
https://juejin.cn/column/7090496324948688910
从零开始搞基建（4）——单元测试 
https://www.cnblogs.com/strick/p/15394115.html

跳槽面试技巧记录 很好的文章 https://juejin.cn/post/7090733245590929421 🔥🔥🔥🔥


初级要：

负责业务系统前端模块的设计与开发；
负责产品的需求分析，开发，测试，维护等各项工作；
承担PC端和移动端的前端HTML5的开发任务；
整体页面结构以及css样式层的设计，优化；
完成页面脚本程序编写，实现各类页面动态，交互效果；
能够理解后端架构，与后端工程师配合为项目提供最优化的技术解决方案。

中级要：

负责所在项目需求实现与开发；
完成系统细节技术设计，完成核心代码的编写；
确保需求实现，满足项目设计规范，软件编码规范以及性能要求；
测试，系统测试等；
积极沟通，以确保功能实现按时，按质交付；
积极参与阶段评审，满足项目过程质量需求，审核和指导开发人员。

已满足，走向高级开发（个人带领过小团队）：

负责大型系统的web前端开发
参与技术选型，推进应用和开发工作，支撑平台架构设计与开发功能
提升系统的整体用户体验，推动前端技术的发展
为提升团队开发效率，提炼公共组件，创造实用工具
优化现有业务，开发流程
关注前端发展，应用行业新技术
团队管理

作者：我是哪吒
链接：https://juejin.cn/post/6977214179149086751
来源：稀土掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


工作一年半，总结出这份前端研发流程图
https://juejin.cn/post/7039330160885104653

我是如何带领团队从零到一建立前端规范的？🎉🎉🎉
https://juejin.cn/post/7085257325165936648
开发者需要建立和遵守的规范
大致可以划分成这几个方向：

开发流程规范
代码规范
git commit规范
项目文件结构规范
UI设计规范


Code Review最佳实践 https://juejin.cn/post/7077372861073063950

为什么需要Code Review
什么时候做Code Review
Committer需要注意什么
Code Reviewer需要看哪方面的内容

为什么需要Code Review
    可以提高committer对于自己代码的要求
    可以让开发更加深刻的理解需求
    组内知识分享
    保持项目代码风格的一致性
    提前发现代码的问题

什么时候进行Code Review
    开发前
    开发中
    提测前
    上线后
Committer需要注意什么
    限制每个commit的改动大小和范围
    Commit信息要有意义
Code Review需要看什么东西
    正确实现了功能或者修复了bug
    确保编码风格一致
    避免非必要的复杂逻辑设计
    避免硬编码
    提高代码复用率
    写上必要的代码注释
带上必要的自动化测试
总结
个人技术动态


谈谈你的项目经历？
https://juejin.cn/post/6905604366792458248

跳槽面试技巧记录 https://juejin.cn/post/7090733245590929421
）项目管理上，你的项目是怎么分配的？成员之间是怎么协作的？


说下单点登录
参考答案：
SSO 一般都需要一个独立的认证中心（passport），子系统的登录均得通过 passport，子系统本身将不参与登录操作，当一个系统成功登录以后，passport 将会颁发一个令牌给各个子系统，子系统可以拿着令牌会获取各自的受保护资源，为了减少频繁认证，各个子系统在被 passport 授权以后，会建立一个局部会话，在一定时间内可以无需再次向 passport 发起认证。
具体流程是：

用户访问系统 1 的受保护资源，系统 1 发现用户未登录，跳转至 sso 认证中心，并将自己的地址作为参数
sso 认证中心发现用户未登录，将用户引导至登录页面
用户输入用户名密码提交登录申请
sso 认证中心校验用户信息，创建用户与 sso 认证中心之间的会话，称为全局会话，同时创建授权令牌
sso 认证中心带着令牌跳转会最初的请求地址（系统 1）
系统 1 拿到令牌，去 sso 认证中心校验令牌是否有效
sso 认证中心校验令牌，返回有效，注册系统 1
系统 1 使用该令牌创建与用户的会话，称为局部会话，返回受保护资源
用户访问系统 2 的受保护资源
系统 2 发现用户未登录，跳转至 sso 认证中心，并将自己的地址作为参数
sso 认证中心发现用户已登录，跳转回系统 2 的地址，并附上令牌
系统 2 拿到令牌，去 sso 认证中心校验令牌是否有效
sso 认证中心校验令牌，返回有效，注册系统 2
系统 2 使用该令牌创建与用户的局部会话，返回受保护资源

作者：一只前端小菜鸟
链接：https://juejin.cn/post/7095945284504518663
来源：稀土掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


    // 根据性能数据，每个维度的去分析数据。
    //     比如拿崩溃分析来说： 分成三个部分，  
    //     1.筛选， 可以更具 语言特性筛选，比如 java的奔溃，js的奔溃，dart的奔溃，oc的崩溃
    //     2.更具框架筛选。 原声框架。RN，Flutter ，小程序
    //     3.地区，大陆，台湾，海外
    //     4.根据cpu架构
    //     5.操作系统
    //     6.具体模块
    //     7.责任人
    //     8.机型
    //     9.厂家
        // DashBoard：
        //     主要是已可视化图表展示（折线图曲线图等），主要有启动崩溃率 实时崩溃数 崩溃率占比  崩溃率分布 等可以对比每个版本的的崩溃率
        //     接入订阅报警（可以手动触发报警）
        // 崩溃报告： 1.责任人。数量占比 2.具体模块， 数量占比 3库名，类名。数量占比 4崩溃行 责任人，数量 百分比
        //     5.操作系统版本 6.渠道号 7.设备ID
        // 崩溃分析：具体崩溃行(责任人，数量，百分比，pms状态)  崩溃详情（崩溃信息 堆栈相关）
        //     和公司PMS系统打通，可以生成pms指定责任人去修改bug状态。。。。。。责任人制定某一个开发去修改，修改完成会变成已完成=== 在PMS中跟踪指定崩溃问题