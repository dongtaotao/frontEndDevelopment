
面试官你好，我叫，我目前在上海移动基础平台架构组，在自已经三年多了，
目前主要负责公司性能监控分析平台网站的建设，
负责整体技术架构和主要开发工作，带一个小团队 开发，
前期参与过公司React-Native 框架维护(Js 部分以及 Native 与 Js 通信的桥接和 CICD)以及业务开发。
也参与过公司Flutter框架的建设，落地公司第一个Flutter 项目。维护公司JSSDK等框架，也参与公司运营H5的开发等。
目前主要技术站是在react方向。但是vue，小程序等混合开发也是没有问题的。
平时喜欢调研一些新技术，看一些技术文章，每周会吧看到不错的文章写在走包里面分享给同事
平时也会写点技术博客，（目前维护的 CSDN 技术博客访问量已经达到一千多万条了）。


1.项目背景
    公司内部有几十个业务线，大大小小有几十个app，但是每个app的质量我们没法保证，也没有统一的监控。
    每个业务线app投递的数据（比如用户行为数据，性能数据，异常数据），可能是第三方网站，也可能是自己内部开发分析平台。
    // 基础平台架构组。。。。。。。。。。 用户行为数据是不关注的，pv uv。
    总之无法统一收集与管理。无法统一的对比y,保证，多有app的质量。
    为了防止数据泄漏以及安全，这时候成立了性能监控分析平台，让所有的业务线对接我们的平台，性能数据统一的投递到到我们的网站展示分析。

    为了统一规范数据规范，架构组提供了很多监控性能的SDK
    // 关键性能指标的SDK： 崩溃，卡顿，内存分析，冻帧分析，ARN分析（用户无响应）
    // 页面性能数据SDK（app启动时间、页面打开时间、埋点trace时间分析），
    // 网络监控数据SDK（http请求性能、dns、webview请求），
    // 热补数据SDK（耗时、成功率、到达率），
    // 业务异常数据SDK（异常栈、业务模块、附加数据）

    前端监控系统，搭建可视化前端分析系统
    性能监控sdk接入
    本次性能监控分析平台就是为了收集所有业务端app的性能数据做，多维度的分析可是化展示的，同时对接了公司项目管理系统，可以跟好的解决性能的bug
    以及打通公司报警订阅功能，实时监控性能数据，发送email给指定的负责人，或者聊天系统，以及公众号。======== 同时根据用户的选择可配置的周报数据，
    在每周特定时间发送给订阅的开发者，订阅周报系统
        收益结果
        通过项目上线，目前公司90%的业务方对接了我们的监控系统， 对比前后，每个app值得质量至少提升了20%以上
        给线上app的质量带来了，很大的提升
        我们通过一个定制的计算公式，计算出每个app线上的质量 崩溃30% + 卡顿20% + 内存泄漏10% + 异常*20%
        崩溃率20%降低了
        卡顿率10%
        提供每天每周 每个app的实时性能数据看板 展示  
        提供监控看板 在监控看板中包含今日数据和往期趋势折线图
        日报，周报大盘。异常大盘，产品质量大盘

    各端SDK实现错误捕获和上报 ---- 大数据日志平台日志接收-------ES 文档型数据库暂存错误日志----mysql持久化存储-----node服务web server接口-----页面展示交互

2.项目目的： 
    为线上app质量提供实时，大数据，全覆盖，多维度监控和报警功能。（进行多维度分析）
3.我的职责：
    负责前端整体技术架构设计和需求开发，推动项目按时按质量的交付上线，以及上线后之后的安全稳定运行
   apmweb

🔥🔥🔥🔥🔥🔥🔥🔥负责技术选型，项目框架搭建，集成框架React全家桶，让项目更加模块化，组件化，规范化，自动化。
    🌰技术选型选什么：技术没有好坏之分，看是否适合自己
            前端框架（vue， react， angular node.js等）
            语言（js，ts）
            其他（构建工具，CI/CD 等）
        技术选型的依据
            1.要站在团队的角度，而非个人的角度
            2.团队成员的学习成本
            3.是否符合团队的技术栈
            4.社区是否已经足够成熟
            5.公司是否已经有经验积累
            ---是否符合项目需求-----------    
            // 生态圈是否完善、社区是否活跃
            应用需要尽可能的小和快就用vue，vue渲染速度比react快
            大型项目建议用react，因为vue模板的使用不容易发现错误、也不易拆分和测试，react和ts结合更好

            前端框架选型（vue，react，angular），构建工具选型（vite，webpack），自动化选型（jenkins）
        要全面考虑各种成本 
            学习成本
            管理成本（如用ts遍地any怎么办）
            升级成本
    🌰为什么要搭建脚手架。https://blog.51cto.com/u_3044148/3351023
        平时在创建react项目时，我们总喜欢用脚手架，因为这样可以快速搭建起项目。但是弊端也是有的，比如不太容易理解项目为什么要这样搭建，
            也可能搞不清楚各部分代码是如何配合的，
        1.便于扩展。
            前端脚手架配置复杂，有时改造第三方的框架，先要非常熟悉框架，当这个框架比较复杂时，
            这样的工作量和难度就大大加大了而自实现的框架(库)则可以根据需要任意扩展，可以根据需求制定对应的规范和API。
        2.便于统一定制开发规范。（模块化，组件化，规范化）
        3.减少升级带来的风险。（配置是自己从0到一配置的，升级起来坑很少）
        4.更好的维护框架以及配置。
        5.可以跟好的学习框架知识（raect，router，webpack，ts，babel，等）
        
    🌰更好的实现前端工程化 
        前端工程化不单单包括前端的模块化、组件化、规范化，自动化，
        还包括前端性能优化，前端目录规划，前端规范化，自动化测试，前端发布部署，性能监控等等一系列知识。 
        为什么要工程化
        方便管理、专注开发、快速迭代等

        前端工程化不是某个具体的工具，而是对项目的整体架构与整体规划，使开发者能在未来可判时间内动态规划发展走向，以提升整个项目对用户的服务周期。

        前端工程化领域实践，利用工程架构的知识重构了众多项目，
        🔥🔥🔥包括但不限于脚手架、组件库、工具库、多包仓库、私有仓库、接口系统、文档系统、监控系统、CICD、可移植容器
        提高效率和降低成本，

    🍒工程化是一种思想，而不是某种技术。其主要目的为了提高效率和降低成本，即提高开发过程中的开发效率，减少不必要的重复工作时间等
        1.模块化 （简单说模块化就是把一个大的文件，拆分成多个相互依赖的小文件，按一个个模块来划分）
           JS模块化方案 AMD/CommonJS/UMD/ES6 Module等等
                模块化的好处
                避免命名冲突(减少命名空间污染)
                更好的分离, 按需加载
                更高复用性
                高可维护性
            CSS模块化方案 css modules

            作用： 隔离作用域，提供复用性，提高可维护性，解决命名冲突，抽离公共代码
        2.组件化 （模块化只是在文件层面上，对代码和资源的拆分；组件化是在设计层面上，对于UI的拆分）
        3.规范化
            在项目规划初期制定的好坏对于后期的开发有一定影响。包括的规范有
                》目录结构的制定   目录结构的划分，编码规范化，接口规范化，文档规范化，git分支管理
                》编码规范
                》前后端接口规范
                // 》文档规范
                // 》组件管理
                》Git分支管理
                》Commit提交描述规范
                》定期codeReview
                // 》视觉图标规范

                设计规范目的
                1.代码风格统一提高可维护性。
                2.提高开发效率
                3.新同事可以快速接收
                4.提高复用率
        4.自动化 （例如持续集成、自动化构建、自动化部署、自动化测试等等） 自动化构建，自动部署，自动化测试
        5.前端发布部署
        
    🌰为什么要做前端工程
        降本提效，保障质量
        提高效率(通过模块/组件化复用各项能力，以及自动化工具提高效 率)
        保障质量(规范化避免犯错，通过引入准入检测、监控、自动化测试 等手段保障研发和运维期间的质量)
        降低成本(提高质量、保障质量，以及自动化带来的开发难度的降低 变相的就降低的整个软件开发的成本)

🔥🔥🔥 🔥🔥🔥🔥基于这个框架模版，做成适用h5以及web端的脚手架，发布到公司的私服上，提高复用性。
    🌰搭建脚手架好处 集成埋点系统，与jssdk并且给出案例调用方式
        提升开发效率
        1.减少重复性的工作，不需要复制其他项目再删除无关代码，或者从零创建一个项目和文件。 
        2.可以根据交互动态生成项目结构和配置文件。 
        3.多人协作更为方便，不需要把文件传来传去。 
🔥🔥🔥 🔥🔥🔥🔥调研ElasticSearch搜索与分析的技术，对接ElasticSearch查询，封装查询语法，提高查询效率。
    elasticsearch 
    Elasticsearch是一种分布式的海量数据搜索与分析的技术 可以用于电商网站、门户网站、企业IT系统等各种场景下的搜索引擎，也可以用于对海量的数据进行近实时的数据分析
    Elasticsearch天生为分布式执行数据分析操作而生的架构，海量数据量级下的近实时（秒级）性能支持，以及无比强大的搜索和聚合分析的语法支持，
       让ES更加适合进行大数据场景下的数据分析应用。
    Elasticsearch 是一个高度可扩展的开源全文本搜索和分析引擎。 它使你可以快速，近乎实时地存储，搜索和分析大量数据。 
        它通常用作支持具有复杂搜索功能和要求的应用程序的基础引擎/技术。
    Elasticsearch是一款强大的搜索和分析数据引擎
    npm install elasticsearch

    https://juejin.cn/book/7054754754529853475
    在互联网、大数据、人工智能高速发展的今天，对于海量数据的存储和检索已然成为刚需。
    毕竟从某种层面来讲，谁掌握了数据，谁就掌握了主动权。是的，那些看似杂乱无章的数据可能蕴含着无数的“金银财宝”，
    但前提是你得有存储、处理、检索、展现的能力。
    Elasticsearch 作为搜索引擎领域的后起之秀，从发布之初到现在已经得到了飞速的发展。其凭借着开源、分布式、RESTFul 等特点，
    成为了现今最热门的搜索引擎。作为 Elastic Stack 的核心，Elasticsearch 可以集中存储你的数据，
    帮助你发现意料之中以及意料之外的情况。通过 Elasticsearch，你可以轻松地存储、搜索、分析大量数据。
    除了搜索领域外，Elasticsearch 与 Kibana、Logstash 组成的 ELK 系统还可以应用到日志采集、分析、监控等领域。

    所以说，使用 Elastic Stack 的解决方案可以安全可靠地存储任何来源、任何格式的数据，
    然后实时地对数据进行搜索、分析和可视化。借助 Elastic Stack 提供的解决方案，你可以轻松解决海量数据面临的存储、处理、分析、检索、展现的问题。

🔥🔥🔥 🔥🔥🔥🔥调研可视化图表，对图表进行二次封装成组建库,提升组件可维护性，扩展性，复用率。
    图表组建库（recharts） React搭配好用的图表模块Recharts React 和 D3 构建的图表库   echarts
    Recharts 是一款图表处理的类库，利用 React 的特性，重新定义了图表的配置和组合方式，大大地提高了图表自定义样式的灵活度
    声明式的标签，让写图表和写 HTML 一样简单
    贴近原生 SVG 的配置项，让配置项更加自然
    接口式的 API，解决各种个性化的需求

🔥🔥🔥 🔥🔥🔥🔥优化项目质量，减少项目编译时间，构建时间，减小包大小，提高网站的性能。
    项目时用webpack搭建的，结合raect代码优化。代码层面，构建工具层面，网络层面

🔥🔥🔥🔥 🔥🔥🔥🔥带领团队参加需求评审，参与需求开发，指定排期，推动项目按时上线，提高项目交付质量和效率。
    🌰目标
    1.把控需求 （调研需求）
        新项目开始、或者新功能模块开始时要参与需求评审，认真审阅需求的详细内容，给出评审意见，提出问题。自己已经同意的需求要能保证按时、按质量的完成。
        评审需求需要你能深入理解项目的业务，不仅仅是自己负责的功能，还有上下游全局的串联
        需求评审之后，还可能有 UI 设计图的评审，交互评审，也要参与，提出自己的意见和问题。保证评审通过的 UI 设计图都能保质保量的开发出来。
        需求和 UI 设计图评审完之后，还要给出开发的排期。
        此时要全面考虑，不仅仅要考虑开发时间，还有内部测试、单元测试的时间，以及考虑一些延期的风险，多加几天的缓冲期。
    2.技术方案设计 
        需求指导设计，设计指导开发。
    3.开发
        作为技术负责人，不应该把自己的主要精力放在代码开发上，但也不能完全不写代码。
        应该去写一些通用能力，核心功能，底层逻辑的代码。其他比较简单的业务代码，可以交给项目成员来完成。
    4.监督代码质量
        技术负责人，可能会带领好多人一起编写代码，但他要把控整个项目的代码质量。例如：
            制定代码规范
            定期组织代码审核
            CI 时使用自动化单元测试
    5.跟踪进度
        每天都组织 10 分钟站会，收集当前的进度、风险和问题。如有延期风险，要及时汇报。
        不仅仅要关心前端开发的进度，还要关心上下游。例如上游的 UI 设计图延期，将会导致前端开发时间不够，进而导致测试时间不够，甚至整个项目延期。
    6。稳定安全的运行

🔥🔥🔥🔥 🔥🔥🔥🔥推动项目CI/CD构建前端自动化部署项目。优化了构建流程，提升了部署效率。

    🌰jenkins+gitlab搭建持续集成持续交付持续部署
    ​ 简单的说，就是在本地更改代码—>git push推送到代码托管—>自动安装依赖，打包测试部署等（开发环境一般自动，生产环境一般是需要手动点击按钮上线
    打造自动化构建部署 CI /CD 流水线服务的工具我们这里用的是Jenkins
    ci / cd 现在有不少服务，GitHub Actions，gitlab 的Gitlab-CI,gitee的Gitee Go，还有travis、Netlify等等
    为了方便部署和迁移等，我们要在docker上安装Jenkins

    如果你们公司没有 CICD 基础设置，那么你可以尝试 github 免费的 CICD 服务: github actions。
    公司一般以 gitlab CI 作为 CICD 工具，此时需要自建 gitlab Runner 作为构建服务器

    master ：保护分支，对应的就是生产环境的分支
    dev：开发分支&脏分支，对应的是大家共用的开发环境
    release：保护分支，所有开发完成的分支会申请合并到release分支，提供给测试人员测试

 🔥🔥🔥🔥 🔥🔥🔥🔥 推动项目code-review，编写代码风格指南，代码开发规范，保证代码的统一和健壮以及可维护性，提升开发效率。   
    🌰code review ================================================
    1.代码规范（eslint不能全检查，如变量命名，代码语义）
    2.重复代码需要抽离，复用
    3.单个函数内容过长，需要拆分
    4.算法复杂度是否可用？是否可继续优化
    5.是否有安全漏洞
    6.扩展性如何？（不用为了扩展而扩展，不封闭即可）
    7.是否和现有功能重复了
    8.是否有完善的单元测试
    9.组件设计是否合理
    
    code review的时机
    1.提交PR或者MR时，通过代码diff进行code review
    2.每周例行一次集体code review

    -定制项目代码规范，变量命名，行数以及组件等等，定义数据格式等等
    -主要是我code-review，看看是否是重复代码，通用代码，以及扩展性如何，还有使用的方法是不是姓语法，是否合理等，
    -箭头函数，以及可选链，用的是promise还是，async await，等等。解构复值扩展运算符等扽

🔥🔥🔥🔥 🔥🔥🔥🔥调研SSO系统以及对接公司单点登录SSO验证中心，提高用户效率。
    🌰对接公司单点登录
    ******* 单点登录
    1.用户访问web1系统
    2.web1没有登录，就会跳转到sso系统， sso系统也没有登录就会弹出登录页面
    3.用户提交账户密码提交后，会将登陆状态写入sso的session
    4.并且会在浏览器中写入sso域下的cookie， sso系统登录完成后会生成以一个ticket
        然后跳转到web1系统页面，同时将ticket做位参数传递给web1系统
    5.Web1系统拿到ticket后，从服务端向sso发送请求，验证ticket是否有效，并且获取用户信息
        验证通过后，web1系统会将用户信息写入session并且设置web域下的cookie，

    6这样跨域单点登录就完成了。
    =========
    7.web2，由于web2也没有登录，所以这时候会跳转到sso，
    8.由于sso已经登录了，不需要输入账号密码进行验证，sso会直接生成ticket
    返回给web2， 从服务端向sso发送请求，验证ticket是否有效，并且获取用户信息
    验证通过后，app系统会将用户信息写入session并且设置web域下的cookie，

    用户向系统1发起注销请求
    系统1根据用户与系统1建立的会话id拿到令牌，向sso认证中心发起注销请求
    sso认证中心校验令牌有效，销毁全局会话，同时取出所有用此令牌注册的系统地址
    sso认证中心向所有注册系统发起注销请求
    各注册系统接收sso认证中心的注销请求，销毁局部会话
    sso认证中心引导用户至登录页面

    用户登录成功之后，会与sso认证中心及各个子系统建立会话，用户与sso认证中心建立的会话称为全局会话，
    用户与各个子系统建立的会话称为局部会话，局部会话建立之后，用户访问子系统受保护资源将不再通过sso认证中心，全局会话与局部会话有如下约束关系
    局部会话存在，全局会话一定存在
    全局会话存在，局部会话不一定存在
    全局会话销毁，局部会话必须销毁


🔥🔥🔥🔥 🔥🔥🔥🔥封装异步加载组件，权限通用组件，基于 antd 的组建二次封装组件，解决页面刷新 redux 状态丢失，提升页面组件化以及提升用户体验。
    1.react 判断是否登录，路由进行重定向。
    2.用户是否有权限控制页面逻辑。比如页面中的报警订阅装置只有leader才可以触发，还有就是分配bug，pms等
    
    页面分享导致状态丢失 &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    解决页面刷新redux状态数据丢失问题 **********************************
    https://blog.csdn.net/z591102/article/details/108096754 
    解决页面刷新导致状态丢失，例如全局选择框
    1.redux-persist管理redux, 解决刷新react-redux数据丢失！ 。redux-persist会将redux的store中的数据缓存到浏览器的localStorage中。
    2.存放在连接hash连接里面，保护，每次属性页面从url里面获取，然后在存储在redux里面。 设置 url 上的 hash query react-router-redux
    ## 举例
   `http://.domain/#/crash/?q={"global":{"st":"1","pt":"1","dt":"1","plgt":"0"},"date":[1497888100000,1498014000000],"crash":{"crtt":"1"}}` 

   网页对url有长度限制，这时候我们只能存储关键的数据，比如奔溃页面的关键数据，用户的选择数据，选择的app类型，ios还是安卓，版本号，时间，奔溃语言，js还是java，
   框架类型是原生还是flutter，操作系统版本号，app渠道，责任人，机型，厂家，设备id等等

🔥🔥🔥🔥 🔥🔥🔥🔥封装统计SDK(数据监控，性能监控，异常监控)，保证项目的数据采集以及监控项目质量。
    
    面试官：如何设计一个前端统计埋点SDK？
    埋点的核心作用就是1.监控用户数据->2.然后分析用户数据->3.最后再优化我们的产品，这也是一个闭环的过程。
    一般情况下，主要有3类埋点：展现埋点+曝光埋点+交互埋点。

    首先设计一个class类来编写我们的SDK，所谓sdk就是一个工具类库而已，只是底层帮我们封装了一些事件方便我们使用。
    简单：前端埋点大致可分为数据监控、性能监控、错误监控。其中数据监控包括监控pv以及自定义事件的监控。
    性能监控可以使用浏览器给我们提供的performance api。
    而错误监控我们可以监听window对象的error事件以及监听promise没有catch情况的unhandlerejected api。
    其中需要注意的是我们必须使用img等来进行上报，因为img标签不会跨域且兼容性较好。
    最后，react/vue内部提供了一些api如ComponentDidCatch（react）/errorCaptured（vue）等api方便我们调用自定义事件进行发送。

链接：https://juejin.cn/post/7080797016086806536
🔥面试官：如何设计一个埋点SDK https://juejin.cn/post/7080797016086806536
腾讯二面：现在要你实现一个埋点监控SDK，你会怎么设计？ https://juejin.cn/post/7085679511290773534  🔥🔥🔥
从零开始搞监控系统（1）——SDK https://juejin.cn/post/7090741336294293540


performance.timing行性能监控

前端工程化介绍

、、const PV_URL_SET = new Set()

class MyStatistic {
    constructor(productId) {
        this.productId = productId
        this.initPerformance() // 性能统计
        this.initError() // 错误监控
    }
    // 发送统计数据
    send(url, params = {}) {
        params.productId = productId
        const paramArr = []
        for (let key in params) {
            const val = params[key]
            paramArr.push(`${key}=${value}`)
        }
        const newUrl = `${url}?${paramArr.join('&')}` // url?a=10&b=20
        // 用 <img> 发送：1. 可跨域；2. 兼容性非常好
        const img = document.createElement('img')
        img.src = newUrl // get
    }
    // 初始化性能统计
    initPerformance() {
        const url = 'yyy'
        this.send(url, performance.timing) // 给最原始的、完整的结果，原始数据
    }
    // 初始化错误监控
    initError() {
        window.addEventListener('error', event => {
            const { error, lineno, colno } = event
            this.error(error, { lineno, colno })
        })
        // Promise 未 catch 住的报错
        window.addEventListener('unhandledrejection', event => {
            this.error(new Error(event.reason), { type: 'unhandledrejection' })
        })
    }
    pv() {
        const href = location.href
        if (PV_URL_SET.get(href)) return // 不重复发送 pv
        this.event('pv')
        PV_URL_SET.add(href)
    }
    event(key, val) {
        const url = 'xxx' // 自定义事件统计 server API
        this.send(url, {key, val})
    }
    error(err, info = {}) {
        const url = 'zzz'
        const { message, stack } = err
        this.send(url, { message, stack, ...info  })
    }
}



🍎项目难点：

在React项目中，我们经常会通过redux以及react-redux来存储和管理全局数据。但是通过redux存储全局数据时，
会有这么一个问题，如果用户刷新了网页，那么我们通过redux存储的全局数据就会被全部清空

页面分享导致状态丢失 &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&  apm
解决页面刷新redux数据丢失问题 ********************************** https://www.cnblogs.com/crazycode2/p/13596807.html
https://blog.csdn.net/z591102/article/details/108096754 
解决页面刷新导致状态丢失，比如：全局选择框
1.redux-persist管理redux, 解决刷新react-redux数据丢失！ 。redux-persist会将redux的store中的数据缓存到浏览器的localStorage中。

   分享时候怎么办
2.存放在连接hash连接里面，保护，每次刷新从页面从url里面获取，然后在存储在redux里面。 设置 url 上的 hash query react-router-redux
## 举例
`http://.domain/#/crash/?q={"global":{"st":"1","pt":"1","dt":"1","plgt":"0"},"date":[1497888100000,1498014000000],"crash":{"crtt":"1"}}` 

🌰 本地页面刷新，导致state丢失
   1.何时存，只要用户刷新或者关闭页面时，都会默默记下当前的state状态。
   window.onbeforeunload = (e) => {
     const state = store.getState();
     saveState(state);
   };
   
   2.何时清空
   当再次发布新版本代码后，问题就来了。
   新代码维护的state和之前的结构不一样，用户用新的代码，读取自己本地缓存的旧的state，难免会出错。 然而用户此时无论怎么操作，都不会清楚掉自己本地缓存的state
   解决就是，state需要有个版本管理，当和代码的版本不一致时，至少进行个清空操作。代码的version更新到state。
   读取state的时候，则要比较代码的版本和state的版本

🌰 分享页面给同事倒是页面状态丢失
    存放在连接hash连接里面，刷新，每次属性页面从url里面获取，然后在存储在redux里面。


https://juejin.cn/post/7065483941305647112#heading-90
100、为什么通常在发送数据埋点请求的时候使用的是 1x1 像素的透明 gif 图片？
可以发送get请求，且不需要获取和处理数据
可以跨域
执行过程无阻塞
相比XMLHttpRequest，性能更好
gif体积小
 

最后一次分享是react ssr 服务端渲染

项目难点2：
埋点SDK