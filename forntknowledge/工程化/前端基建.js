前端基建原来可以做这么多事情
https://juejin.cn/post/7256879435339628604?utm_source=gold_browser_extension
前端基建是指在前端开发过程中，为提高开发效率、代码质量和团队协作而构建的一些基础设施和工具。下面是前端基建可以做的一些事情：
脚手架工具：开发和维护一个通用的脚手架工具，可以帮助团队快速初始化项目结构、配置构建工具、集成常用的开发依赖等。
组件库：开发和维护一个内部的组件库，包含常用的UI组件、业务组件等，提供给团队成员复用，减少重复开发的工作量。
构建工具和打包工具：搭建和维护一套完善的构建和打包工具链，包括使用Webpack、Parcel等工具进行代码的压缩、合并、打包等工具，优化前端资源加载和性能。
自动化测试工具：引入自动化测试工具，如Jest、Mocha等，编写和维护测试用例，进行单元测试、集成测试、UI测试等，提高代码质量和可靠性。
文档工具：使用工具如JSDoc、Swagger等，生成项目的API文档、接口文档等，方便团队成员查阅和维护。
Git工作流：制定和规范团队的Git工作流程，使用版本控制工具管理代码，方便团队协作和代码回退。
性能监控和优化：引入性能监控工具，如Lighthouse、Web Vitals等，对项目进行性能分析，优化网页加载速度、响应时间等。
工程化规范：制定并推广团队的代码规范、目录结构规范等，提高代码的可读性、可维护性和可扩展性。
持续集成和部署：搭建持续集成和部署系统，如Jenkins、Travis CI等，实现代码的自动构建、测试和部署，提高开发效率和代码质量。
项目文档和知识库：建立一个内部的项目文档和知识库，记录项目的技术细节、开发经验、常见问题等，方便团队成员查阅和学习。
通过建立和维护前端基建，可以提高团队的协作效率，减少重复劳动，提高代码质量和项目的可维护性。
当涉及到前端基建时，还有一些其他的事情可以考虑：

代码质量工具：引入代码质量工具，如ESLint、Prettier等，对代码进行静态分析和格式化，提高代码的一致性和可读性。

国际化支持：为项目添加国际化支持，可以通过引入国际化库，如i18next、vue-i18n等，实现多语言的切换和管理。

错误监控和日志收集：引入错误监控工具，如Sentry、Bugsnag等，实时监控前端错误，并收集错误日志，方便进行问题排查和修复。

前端性能优化工具：使用工具如WebPageTest、Chrome DevTools等，对项目进行性能分析和优化，提高页面加载速度、响应时间等。

缓存管理：考虑合理利用浏览器缓存和服务端缓存，减少网络请求，提升用户访问速度和体验。

移动端适配：针对移动端设备，采用响应式设计或使用CSS媒体查询等技术，实现移动端适配，保证页面在不同尺寸的设备上有良好的显示效果。

安全防护：对项目进行安全审计，使用安全防护工具，如CSP（Content Security Policy）、XSS过滤等，保护网站免受常见的安全攻击。

性能优化指标监控：监控和分析关键的性能指标，如页面加载时间、首次渲染时间、交互响应时间等，以便及时发现和解决性能问题。

前端日志分析：使用日志分析工具，如ELK（Elasticsearch、Logstash、Kibana）等，对前端日志进行收集和分析，了解用户行为和页面异常情况。

跨平台开发：考虑使用跨平台开发框架，如React Native、Flutter等，实现一套代码在多个平台上复用，提高开发效率。

编辑器配置和插件：为团队提供统一的编辑器配置文件，包括代码格式化、语法高亮、代码自动补全等，并推荐常用的编辑器插件，提高开发效率。

文档生成工具：使用工具如Docusaurus、VuePress等，为项目生成漂亮的文档网站，方便团队成员查阅和维护项目文档。

Mock数据和接口管理：搭建一个Mock服务器，用于模拟后端接口数据，方便前端开发和测试，同时可以考虑使用接口管理工具，如Swagger等，方便接口的定义和调试。

前端监控和统计：引入前端监控工具，如Google Analytics、百度统计等，收集用户访问数据和行为信息，用于分析和优化用户体验。

移动端调试工具：使用工具如Eruda、VConsole等，帮助在移动端设备上进行调试和错误排查，提高开发效率。

自动化部署：配置自动化部署流程，将项目的代码自动部署到服务器或云平台，减少人工操作，提高发布效率和稳定性。

前端团队协作工具：使用团队协作工具，如GitLab、Bitbucket等，提供代码托管、项目管理、任务分配和团队沟通等功能，增强团队协作效率。

前端培训和知识分享：组织定期的前端培训和技术分享会，让团队成员相互学习和交流，推动技术的共享和提升。

客户端性能优化：针对移动端应用，可以使用工具如React Native Performance、Weex等，进行客户端性能优化，提高应用的响应速度和流畅度。

技术选型和评估：定期评估和研究前端技术的发展趋势，选择适用的技术栈和框架，以保持项目的竞争力和可持续发展。

以上是一些可以考虑的前端基建事项，根据项目需求和团队情况，可以选择适合的工具和技术进行实施。同时，持续关注前端领域的最新技术和工具，不断优化和改进前端基建，以提高开发效率和项目质量。
当涉及到前端基建时，还有一些其他的事情可以考虑：

统一的状态管理：引入状态管理工具，如Redux、Vuex等，帮助团队管理前端应用的状态，提高代码的可维护性和可扩展性。

前端日志记录：引入前端日志记录工具，如log4javascript、logrocket等，记录前端应用的运行日志，方便排查和解决问题。

前端代码扫描：使用静态代码扫描工具，如SonarQube、CodeClimate等，对前端代码进行扫描和分析，发现潜在的问题和漏洞。

前端数据可视化：使用数据可视化工具，如ECharts、Chart.js等，将数据以图表或图形的形式展示，增强数据的可理解性和可视化效果。

前端容灾和故障处理：制定容灾方案和故障处理流程，对前端应用进行监控和预警，及时处理和恢复故障，提高系统的可靠性和稳定性。

前端安全加固：对前端应用进行安全加固，如防止XSS攻击、CSRF攻击、数据加密等，保护用户数据的安全性和隐私。

前端版本管理：建立前端代码的版本管理机制，使用工具如Git、SVN等，管理和追踪代码的变更，方便团队成员之间的协作和版本控制。

前端数据缓存：考虑使用Local Storage、Session Storage等技术，对一些频繁使用的数据进行缓存，提高应用的性能和用户体验。

前端代码分割：使用代码分割技术，如Webpack的动态导入（Dynamic Import），将代码按需加载，减少初始加载的资源大小，提高页面加载速度。

前端性能监测工具：使用性能监测工具，如WebPageTest、GTmetrix等，监测前端应用的性能指标，如页面加载时间、资源加载时间等，进行性能优化。

以上是一些可以考虑的前端基建事项，根据项目需求和团队情况，可以选择适合的工具和技术进行实施。同时，持续关注前端领域的最新技术和工具，不断优化和改进前端基建，以提高开发效率和项目质量。

作者：服部
链接：https://juejin.cn/post/7256879435339628604
来源：稀土掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。



前端工具链、前端工程化和前端框架是在前端开发中常用的概念和工具。
1.前端工具链 (Frontend Tooling):
前端工具链指的是一系列用于协助前端开发的工具的集合。这些工具可以帮助前端开发人员自动化、优化和简化工作流程。
常见的前端工具包括构建工具、打包工具、任务管理工具、代码检查工具、测试工具等。
例如，Webpack、Gulp、Grunt、Babel、ESLint、Prettier等都属于前端工具链的组成部分。
2.前端工程化 (Frontend Engineering):
前端工程化是指将工程化的思想和方法应用于前端开发过程中。前端工程化的目标是提高开发效率、代码质量和团队协作。
它通常包括模块化开发、自动化构建、代码规范、版本控制、持续集成和部署等方面的实践。
通过前端工程化，开发人员可以更好地管理和组织代码、提升项目可维护性和可扩展性。
3.前端框架 (Frontend Framework):
前端框架是一种提供了一系列通用功能和工具的软件包或代码库。它们可以帮助开发人员快速构建交互式、响应式的用户界面。
前端框架通常提供了组件库、路由管理、状态管理、表单验证等功能，从而简化了开发复杂的Web应用程序的过程。一些常见的前端框架包括React、Angular和Vue.js。
这些概念和工具相互关联，可以协同使用来提高前端开发的效率和质量。前端工具链提供了各种工具来自动化构建、优化和调试前端应用程序。
前端工程化则通过规范和流程来提高项目的可维护性和可扩展性。前端框架则提供了可复用的代码和组件，使开发人员能够更快速地构建丰富的用户界面。综合运用这些概念和工具，可以帮助前端开发人员更高效地开发和交付高质量的Web应用程序。



前端基础建设与架构 30 讲
https://www.bilibili.com/video/BV1XS4y1G7KN/?spm_id_from=333.337.search-card.all.click&vd_source=0c743a1becd4c9f9a0c3fcf9b6579f8a