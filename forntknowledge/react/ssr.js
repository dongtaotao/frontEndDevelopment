彻底理解服务端渲染原理 
https://juejin.cn/post/6844903881390964744   

这就需要进行同构了。所谓同构，通俗的讲，就是一套React代码在服务器上运行一遍，到达浏览器又运行一遍。
服务端渲染完成页面结构，浏览器端渲染完成事件绑定。 

Next.js 是 React 服务端渲染应用框架，用于构建 SEO 友好的 SPA 应用

React SSR 服务端渲染原理解析与同构实践
https://juejin.cn/book/6844733810941100045/section/6844733810987237389

我们都知道元素事件是基于浏览器执行的，只有在浏览器端执行了相应的 js 代码才能绑定事件。
在上一节我们实现的这是一个 ssr 直出效果，也就是说只是一个静态页面。
所以我们需要让代码在浏览器端也执行一次，组件在浏览器端挂载完后react会自动完成事件绑定。

浏览器也执行一次代码，组件不会重复渲染吗？
浏览器接管页面后，react-dom在渲染组件前会先和页面中的节点做对比，只有对比失败的时候才会采用客户端的内容进行渲染,
且react会尽量多的复用已有的节点。

初识同构
基于同构，浏览器和服务端可以运行同一份代码，服务端直出组件后，浏览器接管页面，然后剩下的工作由浏览器来完成。      



react服务端渲染原理====================================================gpt
React 是一个非常流行的 JavaScript 库，用于构建用户界面。React 常用的开发模式是客户端渲染，即使用 JavaScript 在浏览器中渲染用户界面。
但是，为了更好的 SEO 和更好的性能，有时候需要使用 React 的服务端渲染（Server-Side Rendering，简称 SSR）模式。本文将介绍 React 的服务端渲染原理。
React 客户端渲染的问题
React 客户端渲染的基本原理是首先将组件全部打包成 JavaScript 文件，然后，当浏览器访问网页时，服务器会将这些文件发送给浏览器，
浏览器在运行这些文件时生成相应的组件并显示在页面上。这种模式相对于传统的服务器端渲染来说，有以下缺点：

网络瓶颈问题：React 应用中通常会包含很多 JavaScript 文件，这会导致访问时间过长，客户端渲染需要先加载 JavaScript 文件，
再执行 React 代码生成页面，这一过程需要经过多次网络请求。而服务器端渲染只需要一次请求，就可以得到完整的 HTML 页面，不需要浏览器再次向服务器请求其他的资源。
SEO 问题：依赖 JavaScript 渲染的页面通常需要一定的时间才能首次渲染，因此搜索引擎对页面的内容收录无法及时实现，给 SEO 带来一定的困难。
而服务端渲染可以将渲染结果通过 HTML 直接返还给浏览器，不需要页面加载完之后再次向服务端发起请求获取数据，搜索引擎能够快速抓取渲染后的内容，有利于 SEO。
首屏渲染问题：React 应用中通常需要大量的 JavaScript，渲染组件的时间会较长，而浏览器在请求 HTML 文件之后需要等待相应的 JavaScript 
文件下载和运行完成后才能展示页面，导致首屏加载速度较慢问题。而服务端渲染可以直接将 HTML 页面发送给浏览器，提高页面的首屏渲染速度。

React 服务端渲染的解决方案

React 提供了一个官方的库 React-SSR 帮助我们进行服务端渲染。React 服务端渲染基本原理如下：

浏览器首次访问页面时，服务器端生成 React 组件，并将其渲染为HTML字符串。
服务器将生成的 HTML 字符串返回给浏览器，该过程仅需一次网络请求。
浏览器接收到 HTML 字符串后，拥有一份完整的 HTML 页面，并且针对每个组件生成了初始化参数和事件等数据，这样页面就已经可以直接响应用户操作了。
浏览器下载 JavaScript 文件并执行，会自动将在服务端前端生成的组件挂载到客户端渲染的节点上，接管事件监听等交互行为。

React 服务端渲染实现的过程

React 服务端渲染基本上可以分为以下几个步骤：

首先通过 Node.js 构建服务端环境。
创建 React 组件，这里可以使用任何已知的初始数据。
使用 React-SSR 库，为创建的 React 组件生成一个 HTML 字符串。
将 HTML 字符串和数据返回给客户端。

其中，最重要的步骤是第三步。在这个步骤中，React-SSR 库会遍历整个组件树，对每个组件进行服务端渲染，并最终生成一个 HTML 字符串。具体过程如下：

使用 renderToString() 函数将 React 组件渲染成一个HTML字符串。
为避免 XSS 攻击，需要对服务器端渲染出来的数据进行转义处理。
将 HTML 字符串返回给客户端。


React 服务端渲染的优缺点

React 的服务端渲染有以下优点：

首屏渲染速度快：服务端渲染将组件在服务器端直接转换为 HTML 字符串，可以更快地响应客户端的请求，从而提高页面首屏渲染速度，而不需要等待浏览器下载并执行 JavaScript 文件。
更好的 SEO：搜索引擎通过抓取页面 HTML 并在服务器侧进行处理和分析来实现网页排名。服务端渲染可以提供爬虫直接获取页面渲染结果的 HTML，并传递给搜索引擎。
更佳的用户体验：因为 React 服务端渲染不需要等待 JavaScript 渲染完成，所以用户可以更快地看到页面的内容，提高用户的体验。

React 的服务端渲染也有以下缺点：

实现成本高：实现服务端渲染需要更多的开发资源和时间。需要在服务器上重复创建组件树，逐个渲染页面并将其发送回客户端。这一过程要比单纯使用客户端渲染的方式要复杂。
对服务器性能要求高：每次请求数据时都需要在服务器上进行组件树的渲染、处理、数据请求等操作，需要消耗更多的服务器资源。
客户端与服务端同步问题：由于首次从服务器下载的 HTML 与后续客户端渲染的内容不同，这使得创建一个兼容两种视图的应用程序变得更加困难。

总体来说，React 的服务端渲染模式可以优化首屏渲染速度和SEO，特别是对于长时间交互的网站和应用程序来说具有非常大的优势。但是，在实现过程中需要更多开发资源和时间，
并且需要更多的服务器资源来处理数据和渲染过程。    