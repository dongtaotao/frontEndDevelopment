移动中台系统 QMA Mobile Application Studio   *******************************************************************************

（2）负责移动中台网站的建设，(为公司其业务方提供APP开发，测试，运营以及运维云到端的一站式解决方案，
    能有效降低技术门槛，减少研发成本，提升开发效率，为企业快速搭建稳定高质量的应用，在中台系
    统对接了公司所有的平台，包括跨平台框架（Flutter，RN，Card），用户运营服务
    （云控，推送，投递，用户反馈），测试&运维服务（打包，灰度，热修复等），后端技术组建，前端技术组建等，)。
主要技术站使用的React， recharts， Webpack， Redux，Typescript,  AntD。
主要负责工单管理的搭建（申请走工单流程，让工单管理更加规范，提高了审批效率以及流程规范）
负责研发公司周报指标系统的搭建(实时的更新周报指标，比如平均启动时长。各种纬度对比，折线图，饼图，等，CICD性能大盘建设)
优化项目质量，减少项目编译时间，构建时间，减小包大小，提高性能。
负责框架维护以及生态建设
负责维护公司验证中心的JSSDK，对接公司所有业务方H5以及Native（比如短信验证，滑动验证，图文验证，文字验证等），
如果是native接入需要使用JSBridge桥接。
（3）参与公司React-Native框架生态建设以及JS部分的维护以及持续集成持续交付CICD的。衔接JS和Native的桥接，封装JS接口模块给业务方使用。参与RN低代码系统架构设计以及开发。目前上线APP的专题页
主要技术是RN+DSL语言构建一个可配置的页面，目前UAU上千万。
（4）落地公司第一个Flutter项目。主要负责Dart页面的开发。极速版赚钱页面是flutter开发的）。


包括：
动态化 & 跨平台开发框架
— card， flutter , 小程序，小游戏，H5，插件，RN 
测试&运维服务
— Apm, 热修，后台服务，瘦身，打包，灰度，代码覆盖 
用户运营服务
—— 用户反馈  推送平台， 云空中心，运营检测
前端业务服务
— 直播， 播放，投屏，账号，支付，广告，拍摄，分享
后端业务服务
前端技术组建
— 网络，图片，存储，UI，通信，路由，AR
后端技术组建
——http数据请求，缓存，GPS定位，数据同步

（3）参与公司的营销H5活动页需求的开发，负责公司3DAvatar项目运营后台开发，以及RN框架建设与业务开发，
负责过RN框架js部分的维护以及jsbundle的CICD，衔接JS和Native的桥接，NativeModule暴露出的原生接口封装JS接
口模块以及封装组建给业务方使用。可独立完成H5架构设计与业务开发。

（4）参与落地公司第一个Flutter项目。主要负责Dart页面的开发。可以独立完成flutter的需求开发，独立解决项
目中遇到的难点，有较强的学习能力，跨端开发能力，。

在京东时候主要负责：在京东商城主要做京东APP活动频道页面的一些开发，以及618双十一的H5大促需求开发。
主要负责项目框架搭建以项目性能优化，项目推动上线，排期相关的工作


2019  -  至 今    北京科技有限公司         高级开发工程师 *******************************************************************************
    工作描述：主要从事前端相关的开发工作。主APP性能监控管理网站的建设（APM），
    以及移动中台网站的建设和 ---公司虚拟形象运营平台的建设----在公司前期，参与H5开发以及React-Native业务开发&桥接。
    参与Flutter框架的建设，以及Flutter业务开发，落地公司第一个Flutter项目。平时喜欢调研一些新技术，
    写点技术博客（目前博客访问量上千万），如Flutter学习，为团队分享Redux，Taro，web3.0等。
2017  -  2019    京东上海分公司                 高级前端开发工程师
    工作描述：在京东主要从事React相关项目开发，负责首页以及一些活动频道的开发，以及京东618和双十一。
    大促需求H5的一些开发例如：京东APP 里面的京东精选项目，款式说项目，一小时达，京东有好价等
2015  -  2017    上海复深蓝股份有限公司         前端开发工程师
    工作描述：在复深蓝主要参与移动H5的混合开发，以及web端的开发，微信小程序的开发。

在主要负责的：=====================================================*******************************************************************************
（1） 负责APM(应用程序性能管理) web项目的开发以及维护，为线上的APP以及web的质量提供实时的，大数据，全覆盖，
多维度监控与报警（主要指标有崩溃分析，
内存分析，冻帧分析，卡顿分析，ANR分析，络性能监控，用户体验监控等）
在项目中主要负责
搭建项目脚手架，集成框架全家桶，整体项目架构设计，项目负责人（集成Webpack + React + Sass + Antd +Typescript +Redux + axios）
基于这个这个框架模版，做成适用h5以及web端的脚手架，发布到公司的私服上，供公司所有业务方使用
由于应用产生的数据量很大，调研ElasticSearch搜索与分析的技术，对接ElasticSearch查询。
调研可视化图表，封装可视化图表组建库（recharts）。
优化项目质量，减少项目编译时间，构建时间，减小包大小，提高性能。
带领团队参加需求评审，参与需求开发，指定排期，推动项目按时上线。
推动CI/CD构建前端自动化部署项目。优化了构建流程，提升了部署效率。
推动项目code-review，编写代码风格指南，代码开发规范，保证代码的统一和健壮以及可维护性。
调研SSO系统以及对接公司单点登录SSO验证中心。
设计动态路由组件，异步加载组件，权限组件，基于antd的组建二次封装组件的方案。


移动端应用数据监测和收集 *******************************************************************************

崩溃数据（堆栈、日志、用户行为路径、异常、寄存器、设备信息） 等
卡顿监控数据（ANR、ui卡顿栈、日志）
页面性能数据（app启动时间、页面打开时间、埋点trace时间分析）
网络监控数据（http请求性能、dns、webview请求）
热补数据（耗时、成功率、到达率）
业务异常数据（异常栈、业务模块、附加数据）


============== react 权限 https://blog.csdn.net/sinat_17775997/article/details/121430365


// 性能： 
    //     1.崩溃数据SDK (堆栈、日志、用户行为路径、异常、寄存器、设备信息)等，
    //     2.卡顿监控数据SDK（ANR、ui卡顿栈、日志），

    // 页面性能数据SDK（app启动时间、页面打开时间、埋点trace时间分析），
    // 网络监控数据SDK（http请求性能、dns、webview请求），
    // 热补数据SDK（耗时、成功率、到达率），
    // 业务异常数据SDK（异常栈、业务模块、附加数据）。通过以上指标数据保证APP的稳定性，提升APP的质量等等
    

主要指标
    APM（application performance management）
    崩溃分析
    ANR，是指在Android上，应用程序响应不够灵敏
    卡顿分析
    冻帧分析
    内存分析——内存泄漏

=== 》 实时崩溃率 折线图，每个时间段，可以是天月时分秒 启动崩溃率 实时崩溃数 崩溃率占比  崩溃率分布 崩溃订阅报警
        可以对比每个版本的的崩溃率
        （可以按找投递时间，筛选，以及按照崩溃事件） 可以输入设备id等
        1.筛选， 可以更具 语言特性筛选，比如 java的奔溃，js的奔溃，dart的奔溃，oc的崩溃
        2.更具框架筛选。 原声框架。RN，Flutter ，小程序
        3.地区，大陆，台湾，海外
        4.根据cpu架构
        5操作系统
        6具体模块
        7.责任人
        8机型
        9厂家
        崩溃报告
        1.责任人。数量占比
        2.具体模块， 数量占比
        3库名，类名。数量占比
        4崩溃行 责任人，数量 百分比
        5.操作系统版本号
        6.渠道号
        7.设备ID
    奔溃分析。  可以生成pms制定责任人去修改。。。。。。责任人制定某一个开发去修改，修改完成会变成已完成
    通过崩溃行 ，点击进入崩溃行详情
    =========
    详情页包括 「
    1.堆栈相关， 日志
    2.占比详情」
网络性能监控 =======
   网络请求
      - 错误分析
      - 耗时分析
      - 劫持分析
    网络诊断
    全链路监控
      - 空窗率
      - 错误率
用户体验监控
    耗时分析
    图片质量监控
    webview
    帧率统计

问题诊断工具
    也无异常
    日志查询
    用户行为
    用户反馈

前端登录，这一篇就够了 *******************************************************************************
    https://www.cnblogs.com/itgezhu/p/13268420.html
   1.用户访问web1系统
   2.web1没有登录，就会跳转到sso系统， sso系统也没有登录就会弹出登录页面
   3.用户提交账户密码提交后，会将登陆状态写入sso的session
   4.并且会在浏览器中写入sso域下的cookie， sso系统登录完成后会生成以一个ticket
   然后跳转到app系统页面，同事讲ticket座位参数传递给web1系统
   
   Web1系统拿到ticket后，从服务端向sso发送请求，验证ticket是否有效，并且获取用户信息
   验证通过后，web系统会将用户信息写入session并且设置web域下的cookie，
   
   这样跨域单点登录就完成了。
   
   web2，由于app2也没有登录，所以这时候会跳转到sso，
   由于sso以及登录了，不需要输入账号密码进行验证，sso会直接生成ticket
   
   返回给web2， 从服务端向sso发送请求，验证ticket是否有效，
   ，并且获取用户信息
   验证通过后，app系统会将用户信息写入session并且设置web域下的cookie，
   https://www.bilibili.com/video/BV12a411273W/?spm_id_from=333.788.recommend_more_video.1


   用户向系统提交注销操作
   系统根据用户与系统1建立的会话，拿到令牌，向sso认证中心提交注销操作
   sso认证中心校验令牌有效，销毁全局会话，同时取出所有用此令牌注册的系统地址
   sso认证中心向所有注册系统发起注销请求，各注册系统销毁局部会话
   sso认证中心引导用户到登录页面
   
   作者：前端先锋
   链接：https://juejin.cn/post/6933111691215372302
   来源：稀土掘金
   著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


一、为什么需要前端监控 *******************************************************************************
获取用户行为以及跟踪产品在用户端的使用情况，并以监控数据为基础，指明产品优化的方向。
(1)数据监控
    数据监控，顾名思义就是监听用户的行为。常见的数据监控包括：
    PV/UV:PV(page view)，即页面浏览量或点击量。UV:指访问某个站点或点击某条新闻的不同IP地址的人数
    用户在每一个页面的停留时间
    用户通过什么入口来访问该网页
    用户在相应的页面中触发的行为

(2)性能监控
  性能监控指的是监听前端的性能，主要包括监听网页或者说产品在用户端的体验。常见的性能监控数据包括：
    不同用户，不同机型和不同系统下的首屏加载时间
    白屏时间
    http等请求的响应时间
    静态资源整体下载时间
    页面渲染时间
    页面交互动画完成时间
(3)异常监控
Javascript的异常监控
样式丢失的异常监控

1.脚本错误
    语法错误
    运行时错误
        同步错误
        异步错误
        Promise 错误
2.网络错误
        资源加载错误
        自定义请求错误
//================================================================
为了便于分析发生的错误，一般利用 window.onerror 事件来监听错误的发生。 它比try catch的捕获错误信息的能力要强大。
window.onerror 最大的好处就是同步任务、异步任务都可捕获

其实 onerror 固然好但是还是有一类异常无法捕获。这就是网络异常的错误。
由于网络请求异常不会冒泡，应此需要在事件捕获阶段才能获取到。 我们可以利用 window.addEventListener。
Promise异常捕获：
try catch

通常在发送数据埋点请求的时候使用的是 1x1 像素的图片？
不存在跨域问题 执行过程无阻塞 体积较小 不占用ajax的请求限额 

日志上报的方式
异步请求上报, 后端提供接口，或者直接发到日志服务器
img请求上报, url参数带上错误信息

********************+++++++++++++++++++++++++++++++

webpack热更新原理  react  *******************************************************************************
HMR 即模块热替换（hot module replacement）的简称，它可以在应用运行的时候，不需要刷新页面，就可以直接替换、增删模块。
当修改了一个或多个文件；
文件系统接收更改并通知 webpack；
webpack 重新编译构建一个或多个模块，并通知 HMR 服务器进行更新；
HMR Server 使用 webSocket 通知 HMR runtime 需要更新，HMR 运行时通过 HTTP 请求更新 jsonp
HMR 运行时替换更新中的模块，如果确定这些模块无法更新，则触发整个页面刷新
********************+++++++++++++++++++++++++++++++

初始化参数：从配置文件和 Shell 语句中读取并合并参数，得出最终的配置参数。 *******************************************************************************
开始编译：从上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译。
确定入口：根据配置中的 entry 找出所有的入口文件。
编译模块：从入口文件出发，调用所有配置的 loader 对模块进行翻译，再找出该模块依赖的模块，这个步骤是递归执行的，
  直至所有入口依赖的模块文件都经过本步骤的处理。
完成模块编译：经过第 4 步使用 loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。
输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 chunk，再把每个 chunk 转换成一个单独的文件加入到输出列表，
   这一步是可以修改输出内容的最后机会。
输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。

React 的生命周期发生变化和改进的原因都是因为React 项目使用成为“Fiber”的核心架构重写了React。
React Fiber 是一种基于浏览器的单线程调度算法。

React Fiber 用类似 requestIdleCallback 的机制来做异步 diff。但是之前数据结构不支持这样的实现异步 diff，
于是 React 实现了一个类似链表的数据结构，将原来的 递归diff 变成了现在的 遍历diff，这样就能做到异步可更新了

Fiber使原来React 15的同步渲染变成了异步渲染，避免阻塞React 主线程。 *******************************************************************************
在React 16之前，我们使用setState更新组件，React都会生成一个新的虚拟DOM,通过与上一次的DOM进行
diff对比后，再定向更新真实的DOM。这是一个同步渲染的递归过程，就如同走楼梯一样。
如果页面的布局复杂嵌套很深，那么递归调用的时间就会很长，那么的主线程就会被js一直占用着，任何交互，
布局，渲染都会停止，那给用户呈现的画面就是很卡顿。

而使用Fiber重构之后就解决了这个问题，Fiber将漫长的更新任务进行切片成小任务。执行完一个小任务，
就将主线程交换回去，看看是否有优先级更高的任务需要处理，这样就避免了同步更新造成UI阻塞的问题。
使用Fiber进行切片后，异步的渲染任务就变成了可打断的，执行过程就变成了如下的模式：

而 React 16 引入的 Fiber 架构，恰好能够解决掉这个风险：Fiber 会将一个
大的更新任务拆解为许多个小任务。每当执行完一个小任务时，渲染线程都会把主线程交
回去，看看有没有优先级更高的工作要处理，确保不会出现其他任务被“饿死”的情况，进而避免
同步渲染带来的卡顿。在这个过程中，渲染线程不再“一去不回头”，而是可以被打断的，这就是所谓的“异步渲染”，

同步到异步
从递归到循环 遍历

初始化参数：取配置文件和shell脚本参数并合并
开始编译：用上一步得到的参数初始化compiler对象，执行run方法开始编译
确定入口：根据配置中的entry，确定入口文件
编译模块：从入口文件出发，递归遍历找出所有依赖模块的文件
完成模块编译：使用loader转译所有模块，得到转译后的最终内容和依赖关系
输出资源：根据入口和模块依赖关系，组装成一个个chunk，加到输出列表
输出完成：根据配置中的output，确定输出路径和文件名，把文件内容写入输出目录（默认是dist）



cICD
安装docker
安装nginx。安装jenkins
查看镜像
配置nginx.conf
创建容器

jenkins配置

插件配置
全局配置ssh server
全局工具配置node.js

新建jenkins
* 任务配置-源码管理
* 任务配置-构建触发器
* 任务配置-构建环境
* 任务配置-构建
* 任务配置-构建后操作

1.程序员在本地进行开发
2.程序员将修改后的代码提交到gitlab代码仓库
3.gitlab收到代码后通过webhook通知jenkins进行构建
4.jenkins构建好了以后将构建好以后的代码发布的到线上服务器

安装gitlab
配置gitlab-runner
编写.gitlab-ci.yml文件
编写.docker-compose.yml文件
注册gitlab-runner到gitlab

编写dockerfile文件

=============

下载：从Github下载代码，然后本地npm install
开发：npm run dev本地修改代码，测试
编译：npm run build使用 Webpack 进行编译，产出静态资源
上传：打开FTP软件，上传替换文件
测试：看看网站是否在线上工作正常
提交：将代码提交到 Github

docker
执行git push
自动检测到 github 有代码更新，自动打包出一个 Docker 镜像
CI 编译完成后，SSH 登录 VPS，删掉现有容器，用新镜像创建一个新容器

而这样做的好处是：
不必再手动 FTP 上传文件
不必手动维护服务器的 Nodejs 运行环境

Docker是什么
==》Docker是一个开源的应用容器引擎
==》Docker,其实就是可以打包程序和运行环境，把环境和程序一起发布给容器，当你需要发布程序时，你可以使用Docker
==》将运行环境一起发布，其他人拿到你的程序后可以直接运行，避免出现一次编译到处调试的尴尬局面。
==》Docker的出现主要就是为了解决：“在我的机器上是正常的，为什么到你的机器上就不正常了的问题”

Nginx 是开源、高性能、高可靠的 Web 和反向代理服务器


APM
主要指标
崩溃分析
    Dashboard   仪表盘。
    实时崩溃率 折线图，每个时间段，可以是天月时分秒
    启动崩溃率

    实时崩溃数
    崩溃率占比
    崩溃率分布
    崩溃订阅报警
    可以对比每个版本的的崩溃率
    （可以按照投递时间，筛选，以及按照崩溃事件）

    1.筛选， 可以更具 语言特性筛选，比如 java的奔溃，js的奔溃，dart的奔溃，oc的崩溃
    2.更具框架筛选。 原声框架。RN，Flutter ，小程序
    3.地区，大陆，台湾，海外
    4.根据cpu架构
    5操作系统
    6具体模块
    7.责任人
    8机型
    9厂家

        可以输入设备id等
        崩溃报告
        1.责任人。数量占比
        2.具体模块， 数量占比
        3库名，类名。数量占比
        4崩溃行 责任人，数量 百分比
        5.操作系统版本号
        6.渠道号
        7.设备ID

        奔溃分析。  可以生成pms制定责任人去修改。。。。。。责任人制定某一个开发去修改，修改完成会变成已完成
        通过崩溃行 ，点击进入崩溃行详情
            详情页包括 「
            1.堆栈相关， 日志
            2.占比详情」

    ANR（Application Not Response）是指在Android上，应用程序响应不够灵敏
    卡顿分析
    冻帧分析
    内存分析——内存泄漏

网络性能监控
    网络请求   
        错误分析
        劫持分析
        耗时分析
    网络诊断
    全链路监控
        空窗率
        错误率

用户体验监控
    耗时分析
    webview
        域名错误，域名耗时，单页面耗时

    图片质量监控
       图片格式分析
       图片来源分析
问题反馈

多维度横向对比每个app

移动端应用数据监测和收集


崩溃数据（堆栈、日志、用户行为路径、异常、寄存器、设备信息）
卡顿监控数据（ANR、ui卡顿栈、日志）
页面性能数据（app启动时间、页面打开时间、埋点trace时间分析）
网络监控数据（http请求性能、dns、webview请求）
热补数据（耗时、成功率、到达率）
业务异常数据（异常栈、业务模块、附加数据）


2.实现思路 
项目模板放在github上 
用户通过命令交互的方式下载不同的模版 
经过模版引擎渲染定制项目模版 
模版变动，只需更新模版即可，不需要用户更新脚手架 


设计模块知识点 
commander.js命令行工具 
download-git-repo: 用来下载远程模板 
inquirer: 交互式命令行工具 
ora: 显示loading动画 
chalk: 修改控制台输出内容样式 
log-symbols: 显示出 √ 或 × 等的图标 



（1）负责App性能监控分析平台web项目的架构，开发以及维护，
为公司所有线上的APP的质量提供实时的，大数据，全覆盖，多维度监控与报警。
主要指标：
1.崩溃数据(堆栈、日志、用户行为路径、异常、寄存器、设备信息)等，
2.卡顿监控数据（ANR、ui卡顿栈、日志），
3.页面性能数据（app启动时间、页面打开时间、埋点trace时间分析）
4.网络监控数据（http请求性能、dns、webview请求），
5.热补数据（耗时、成功率、到达率），
6.业务异常数据（异常栈、业务模块、附加数据）。通过以上指标保证APP的稳定性，提升APP的质量。